<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>tech on Bai</title><link>https://blog.mua.blue/tags/tech/</link><description>Recent content in tech on Bai</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 19 Oct 2021 13:16:28 +0800</lastBuildDate><atom:link href="https://blog.mua.blue/tags/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Mac安装nvm</title><link>https://blog.mua.blue/2021-10/mac%E5%AE%89%E8%A3%85nvm/</link><pubDate>Tue, 19 Oct 2021 13:16:28 +0800</pubDate><guid>https://blog.mua.blue/2021-10/mac%E5%AE%89%E8%A3%85nvm/</guid><description>安装 使用brew brew install nvm
touch ~/.zshrc或其他shell配置
添加
export NVM_DIR=&amp;#34;$([ -z &amp;#34;${XDG_CONFIG_HOME-}&amp;#34; ] &amp;amp;&amp;amp; printf %s &amp;#34;${HOME}/.nvm&amp;#34; || printf %s &amp;#34;${XDG_CONFIG_HOME}/nvm&amp;#34;)&amp;#34; [ -s &amp;#34;$NVM_DIR/nvm.sh&amp;#34; ] &amp;amp;&amp;amp; \. &amp;#34;$NVM_DIR/nvm.sh&amp;#34; # This loads nvm 安装完成！
自行安装 打开终端
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
如果出现如下问题，请挂代理后重试
执行完毕后输入nvm --version即可查看到当前版本
如果出现nvm: command not found，可照着官方给出的方法解决
根据自己默认shell创建一个配置文件，比如我使用的是zsh，则touch ~/.zshrc 再次运行安装命令 安装完成！
用法 要下载、编译和安装最新版本的节点</description></item><item><title>利用Chrome的Console功能循环js函数</title><link>https://blog.mua.blue/2021-09/%E5%88%A9%E7%94%A8chrome%E7%9A%84console%E5%8A%9F%E8%83%BD%E5%BE%AA%E7%8E%AFjs%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 27 Sep 2021 21:03:07 +0800</pubDate><guid>https://blog.mua.blue/2021-09/%E5%88%A9%E7%94%A8chrome%E7%9A%84console%E5%8A%9F%E8%83%BD%E5%BE%AA%E7%8E%AFjs%E5%87%BD%E6%95%B0/</guid><description>代码 var autoTouch = setInterval(function(){ save(); },2000); autoTouch; 每两秒就会执行一次sava()函数。
setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。
setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。</description></item><item><title>uPic图床配置-Chevereto</title><link>https://blog.mua.blue/2021-09/upic%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE-chevereto/</link><pubDate>Sat, 25 Sep 2021 18:23:45 +0800</pubDate><guid>https://blog.mua.blue/2021-09/upic%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE-chevereto/</guid><description>安装uPic Homebrew:
brew install --cask upic 手动:
前往作者的Github下载。
具体功能可以查看作者博客
配置uPic 参数:
API 地址: 填写上面准备好的 [上传服务地址] 请求方式: POST 使用 Base64: 勾选 文件字段名: source URL 路径: 上传完成后获取图片链接的路径。['image', 'url'] Content-Type: multipart/form-data; charset=utf-8; key: 填写上面准备好的 [API Key] action: upload 最后 enjoy!!!</description></item><item><title>Chevereto图床安装</title><link>https://blog.mua.blue/2021-09/chevereto%E5%9B%BE%E5%BA%8A%E5%AE%89%E8%A3%85/</link><pubDate>Sat, 25 Sep 2021 18:23:24 +0800</pubDate><guid>https://blog.mua.blue/2021-09/chevereto%E5%9B%BE%E5%BA%8A%E5%AE%89%E8%A3%85/</guid><description>起因 在写一篇md的时候突然想插入图片，可是本地图片插入后hugo无法正确的生成文章到服务器，这时候就需要使用url图片了。于是我在网上找到了Chevereto。
安装 方法1： Chevereto-Free Github根据官方文档或者网上教程进行安装。
方法2：nmtan/chevereto使用docker安装
因为docker安装起来非常方便，所以我选择方法2进行安装Chevereto。如果没有安装docker and docker-compose可以去看我之前的文章。
nmtan/chevereto中的overview里已经给出了docker-compose.yml，我们可以直接拿来使用。
创建一个空目录，创建docker-compose.yml
编写docker-compose.yml
#docker-compose.yml version: &amp;#39;3&amp;#39; services: db: image: mariadb volumes: - ./database:/var/lib/mysql:rw restart: always networks: - private environment: MYSQL_ROOT_PASSWORD: chevereto_root MYSQL_DATABASE: chevereto MYSQL_USER: chevereto MYSQL_PASSWORD: chevereto chevereto: depends_on: - db image: nmtan/chevereto restart: always networks: - private environment: CHEVERETO_DB_HOST: db CHEVERETO_DB_USERNAME: chevereto CHEVERETO_DB_PASSWORD: chevereto CHEVERETO_DB_NAME: chevereto CHEVERETO_DB_PREFIX: chv_ volumes: - .</description></item><item><title>图标跟随背景变色</title><link>https://blog.mua.blue/2021-09/%E5%9B%BE%E6%A0%87%E8%B7%9F%E9%9A%8F%E8%83%8C%E6%99%AF%E5%8F%98%E8%89%B2/</link><pubDate>Fri, 24 Sep 2021 17:10:46 +0800</pubDate><guid>https://blog.mua.blue/2021-09/%E5%9B%BE%E6%A0%87%E8%B7%9F%E9%9A%8F%E8%83%8C%E6%99%AF%E5%8F%98%E8%89%B2/</guid><description>起因 使用hugo的博客搭建好了，目前使用的是PaperMod主题，因为该主题自带图标比较少，我就自己上iconfont找了几个，但是我发现在黑夜模式下，图标不会像自带图标一样由黑变成白的。
解决办法 例如：bilibili小电视图标
白天模式： 黑夜模式：会看不清楚小电视。
修改前的代码：
&amp;lt;svg t=&amp;#34;1632470105372&amp;#34; class=&amp;#34;icon&amp;#34; viewBox=&amp;#34;0 0 1024 1024&amp;#34; version=&amp;#34;1.1&amp;#34; xmlns=&amp;#34;http://www.w3.org/2000/svg&amp;#34;&amp;gt; &amp;lt;path d=&amp;#34;M386.327273 437.527273h-4.654546l-125.672727 27.927272c-18.618182 4.654545-27.927273 18.618182-23.272727 37.236364v9.309091c4.654545 13.963636 13.963636 23.272727 27.927272 23.272727h4.654546l130.327273-23.272727c18.618182-4.654545 27.927273-18.618182 23.272727-37.236364V465.454545c-4.654545-13.963636-18.618182-27.927273-32.581818-27.927272zM414.254545 605.090909c-9.309091 0-18.618182 9.309091-18.618181 18.618182 0 18.618182 4.654545 37.236364 18.618181 51.2 13.963636 18.618182 32.581818 23.272727 51.2 23.272727 18.618182 0 32.581818-4.654545 46.545455-18.618182h9.309091c13.963636 13.963636 27.927273 18.618182 41.890909 18.618182 18.618182 0 27.927273-4.654545 41.890909-9.309091 23.272727-18.618182 32.581818-41.890909 32.581818-69.818182 0-4.654545 0-4.654545-4.654545-9.30909-9.309091-4.654545-13.963636-4.654545-23.272727-4.654546H605.090909c-9.309091 0-13.</description></item><item><title>Centos7正确安装docker/docker-compse</title><link>https://blog.mua.blue/2021-09/centos7%E6%AD%A3%E7%A1%AE%E5%AE%89%E8%A3%85docker/docker-compse/</link><pubDate>Thu, 23 Sep 2021 16:11:53 +0800</pubDate><guid>https://blog.mua.blue/2021-09/centos7%E6%AD%A3%E7%A1%AE%E5%AE%89%E8%A3%85docker/docker-compse/</guid><description>Centos7正确安装docker/docker-compse 安装docker yum -y update 先升级，yum有两个升级命令update和upgrade
yum -y update：升级所有包同时，也升级软件和系统内核；
yum -y upgrade：只升级所有包，不升级软件和系统内核，软件和内核保持原样。
-y 代表着当安装包时询问你Is this OK[y/d/N]，就会自动选择y，不需要你再手动选择。
出现Complete!即为更新完成
yum -y install docker docker -v 出现Docker version 1.13.1, build 7d71120/1.13.1相似结果即成功安装
启动：sudo systemctl start docker
设置开机启动：sudo systemctl enable docker
安装docker-compose pip3 install --upgrade pip #加上--upgrade为升级包而不是安装包 pip3 install docker-compose 而我在最新版本启动docker-compose报错
$ docker-compose up Building tomcat unknown flag: --iidfile See &amp;#39;docker build --help&amp;#39;.</description></item><item><title>宝塔取消登陆限制</title><link>https://blog.mua.blue/2021-09/%E5%AE%9D%E5%A1%94%E5%8F%96%E6%B6%88%E7%99%BB%E9%99%86%E9%99%90%E5%88%B6/</link><pubDate>Wed, 22 Sep 2021 00:00:00 +0800</pubDate><guid>https://blog.mua.blue/2021-09/%E5%AE%9D%E5%A1%94%E5%8F%96%E6%B6%88%E7%99%BB%E9%99%86%E9%99%90%E5%88%B6/</guid><description>宝塔取消登陆限制 现在宝塔面板好恶心，安装完毕之后必须登录账号，否则无法进入面板进行操作。
于是我上网上找了一些取消限制的方法，有很多方法都失效了，没办法使用，还会造成面板异常。
简单粗暴
rm -f /www/server/panel/data/bind.pl 执行后就可以正常使用了。</description></item><item><title>linux后台运行脚本</title><link>https://blog.mua.blue/2021-09/linux%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</link><pubDate>Sun, 19 Sep 2021 11:50:46 +0800</pubDate><guid>https://blog.mua.blue/2021-09/linux%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</guid><description>linux后台运行脚本 运行 nohup command &amp;gt; run.log 2&amp;gt;&amp;amp;1 &amp;amp; 将标准错误2重定向到标准输出**&amp;amp;1**，标准输出**&amp;amp;1再被重定向输入到run.log**文件中。最后一个&amp;amp;代表后台运行的意思。 nohup英文全称 no hang up（不挂起），用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行。
ps:在执行python脚本时最好加上-u参数，-u 代表程序不启用缓存，也就是把输出直接放到log中，没这个参数的话，log文件的生成会有延迟。
终止 如果没有关闭当前终端jobs -l查看进程，如果关闭了当前终端还想查看ps -aux|grep 需查找的
最后使用 kill -9 pid来杀死进程
-9为强制杀死进程</description></item><item><title>Mac禁用谷歌浏览器自动更新</title><link>https://blog.mua.blue/2021-09/mac%E7%A6%81%E7%94%A8%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</link><pubDate>Thu, 16 Sep 2021 23:08:04 +0800</pubDate><guid>https://blog.mua.blue/2021-09/mac%E7%A6%81%E7%94%A8%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</guid><description>原文 From reading Chrome is Bad, it seems in some situations the updater (also known as keystone) can chew up CPU cycles. Whilst I’m not 100% convinced keystone continuously chews CPU, its launchctl configuration suggests it runs at least once an hour. Given I don’t use Chrome as my main browser, this is undesirable behaviour for me.
With that in mind, I’ve decided to disable the background services rather than delete Chrome entirely.</description></item><item><title>mac使用homebrew安装jdk</title><link>https://blog.mua.blue/2021-09/mac%E4%BD%BF%E7%94%A8homebrew%E5%AE%89%E8%A3%85jdk/</link><pubDate>Sat, 11 Sep 2021 14:22:52 +0800</pubDate><guid>https://blog.mua.blue/2021-09/mac%E4%BD%BF%E7%94%A8homebrew%E5%AE%89%E8%A3%85jdk/</guid><description>Homebrew安装jdk 因为电脑上没有jdk需要安装一个，首先去homebrew仓库里搜索jdk但是很奇怪，感觉都不是官方的。于是我去百度搜索，找到这个命令
brew cask install homebrew/cask-versions/adoptopenjdk8 //但是无法使用，进行报错搜索后发现homebrew已经丢弃这种用法 //目前正确用法 brew install --cask homebrew/cask-versions/adoptopenjdk8 如果下载速度比较慢挂个终端代理就好。</description></item><item><title>Mac下Git上传本地项目到Github</title><link>https://blog.mua.blue/2021-09/mac%E4%B8%8Bgit%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%88%B0github/</link><pubDate>Fri, 10 Sep 2021 11:35:30 +0800</pubDate><guid>https://blog.mua.blue/2021-09/mac%E4%B8%8Bgit%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%88%B0github/</guid><description>因为我的电脑是Macbook2020 M1自带了git，所以不需要进行下载操作。安装应该也很简单，使用brew install git即可。配置参考如何使用Git上传本地项目到github(mac版)，如果以后需要在一个电脑使用多个Git账户可以参考Mac多个Git账户配置</description></item><item><title>Linux定时任务</title><link>https://blog.mua.blue/2021-02/linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link><pubDate>Sat, 13 Feb 2021 14:28:37 +0800</pubDate><guid>https://blog.mua.blue/2021-02/linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid><description>定时任务 因为今天写了一个学习通自动签到服务需要部署到centos服务器下，这里我就要啰嗦一下，开始服务器使用的是ubuntu系统，结果使用网上的部署flask教程部署不成功，还是我太菜了，网上的教程也都是一个模(mu)子刻出来的，于是我只能换成centos系统了，因为宝塔面板里的python一键部署工具只支持centos。
部署完成后就是让任务每隔多久执行一次了，从百度上找到Linux自带的Crontab，看了一下觉得已经可以解决绝大部分定时问题了。
配置文件中的每一行具有六个栏位，这六个栏位的意义为:
意义 分钟 小时 日期 月份 星期 命令 范围 0-59 0-23 1-31 1-12 0-7 command 其中星期取值为0和7时均代表星期日.
前五栏除了可以取上表中的这些值外,还可以取下面这些特殊参数:
***** 取值范围内的所有数字 / 每过多少个数字 - 从X到Z **，**散列数字 crontab [-u username]　//省略用户表表示操作当前用户的crontab -e (编辑工作表) -l (列出工作表里的命令) -r (删除工作) 例如我需要在星期一到星期五早上八点到下午十点每三分钟执行一次
*/3 8-12 * * 1-5 python /www/wwwroot/xuexi/sign1.py */3 14-22 * * 1-5 python /www/wwwroot/xuexi/sign1.py 错误纠正
在星期一到星期五早上八点到下午十点每三分钟执行一次应该是
*/5 8-11 * * 1-5 python /www/wwwroot/xuexi/sign1.</description></item><item><title>封禁ip后解决办法</title><link>https://blog.mua.blue/2020-08/%E5%B0%81%E7%A6%81ip%E5%90%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Fri, 21 Aug 2020 14:28:37 +0800</pubDate><guid>https://blog.mua.blue/2020-08/%E5%B0%81%E7%A6%81ip%E5%90%8E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>问题原因 因为昨天使用阿里云进行学习通自动签到发现出错，，报错为没有权限访问http://mooc1-api.xxx.com这个域名，但我使用自己电脑时却可以正常访问，于是进行问题的排除，我认为发生这个原因有两种可能
程序问题 ip问题 解决方法 起初我使用的是数据库访问获取cookie，于是我自行进入网站获取cookie在自己电脑测试可以访问后使用服务器访问，结果还是出错，然后我看见python版本不一样，我使用pyenv将版本切换成python3.7后运行发现还是出错。这样就只能认为是第二个ip问题，我在网上寻找了requests代理方法，没想到挺简单的只需要：
proxy = { &amp;#39;http&amp;#39;: &amp;#39;http://xxx.xxx.xxx.xxx:8888&amp;#39;, #也可以https访问 &amp;#39;https&amp;#39;:&amp;#39;http://xxx.xxx.xxx.xxx:8888&amp;#39; } requests.get(url,proxies=proxy) 在https://www.xicidaili.com/nn/里找了一个ip进行尝试，结果成功了。这就可以确定是阿里云的ip被学习通封了。于是我开始思考如何找到一个靠谱的ip代理，因为网上的免费ip代理都比较不安全，可能会造成你发送的信息泄露，如果是正常的爬虫等等可以使用这种，但如果是发送一些信息可能会被不法分子利用。
突然想到自己在腾讯云有一个学生机，先在服务器上运行了一下代码，运行成功，说明没有封禁该ip，只要这需要将该服务器做成代理服务器就可以成功运行了。在网上一番寻找发现了tinyproxy，但是大多都是基于centos的教程，而我使用的是ubuntu，弄了一晚上都没成功，第二天中午又找到一个教程，终于成功了。
tinyproxy安装步骤 先将腾讯云初始用户名ubuntu改为root 官方教程
安装tinyproxy
sudo apt-get update apt-get install tinyproxy 配置参数文件
这个是一个坑&amp;hellip;.很多教程都是vim /etc/tinyproxy/tinyproxy.conf使用命令之后里面是空白的，而且无法修改，修改会提示没有权限。我就纳闷了，于是我上网搜了一下，看见有一个老哥说有可能是没有这个文件，我看了一下，真的没有&amp;hellip;实际命令应该是vim /etc/tinyproxy.conf
修改两部分即可
Port 8888 #预设是8888端口 Allow 127.0.0.1 #将127.0.0.1改成你自己的IP，只有这个IP才能连接，前面打#注释掉则所有人都可以连接 tinyproxy打开与关闭
运行 sudo service tinyproxy start 重启 sudo service tinyproxy restart 停止 sudo service tinyproxy stop 这样我就可以使用阿里云服务器运行了。
参考链接 https://blog.csdn.net/qq_18483627/article/details/81051486?depth_1-utm_source=distribute.pc_relevant.none-task&amp;amp;utm_source=distribute.pc_relevant.none-task</description></item><item><title>记安装halo过程</title><link>https://blog.mua.blue/2020-03/%E8%AE%B0%E5%AE%89%E8%A3%85halo%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 28 Mar 2020 14:28:37 +0800</pubDate><guid>https://blog.mua.blue/2020-03/%E8%AE%B0%E5%AE%89%E8%A3%85halo%E8%BF%87%E7%A8%8B/</guid><description>环境安装 根据halo官网的开发文档进行配置，因为官网开发文档是基于CentOS 7.x 为例，而我使用的是ubuntu16，所以安装jdk指令与官网不一样。通过查找资料sudo apt install openjdk-8-jdk安装jdk1.8。 验证安装成功：java -version 你会看到这样的输出:
openjdk version &amp;#34;1.8.0_162&amp;#34; OpenJDK Runtime Environment (build 1.8.0_162-8u162-b12-1-b12) OpenJDK 64-Bit Server VM (build 25.162-b12, mixed mode) 安装halo 同样根据halo官网的开发文档进行安装，然后配置文件。
部署到服务器 在放到服务器上我栽了很多跟头，我重装了两三次系统，后面发现阿里云可以使用快照，而且一个小时只需要几厘钱，可以大大节约我测试安装时间，以后安装新软件就可以先去阿里云备份。
第一次部署完成后，发现只有主页是可以不加8xxx端口的其它网页会加端口访问，这让我强迫症犯难，通过修改halo的网站链接发现无法访问动态资源。
后面通过多次尝试，发现是nginx配置的问题，bt面板刚开始会自动配置出
server { listen 80; server_name xxxxx; index index.php index.html index.htm default.php default.htm default.html; root xxxxxxxx; #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则 #error_page 404/404.html; #SSL-END #ERROR-PAGE-START 错误页配置，可以注释、删除或修改 #error_page 404 /404.html; #error_page 502 /502.html; #ERROR-PAGE-END #PHP-INFO-START PHP引用配置，可以注释或修改 include enable-php-56.conf; #PHP-INFO-END #REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效 include xxxxx; #REWRITE-END #禁止访问的文件或目录 location ~ ^/(\.</description></item></channel></rss>